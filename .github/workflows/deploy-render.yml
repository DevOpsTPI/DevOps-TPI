name: Deploy changed services to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  detect-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure render mapping file exists
        run: |
          if [ ! -f render-services.json ]; then
            echo "render-services.json not found. Please add it to the repo or copy from render-services.example.json" >&2
            exit 1
          fi

      - name: Get changed files vs main
        id: changes
        run: |
          git fetch origin main --quiet || true
          # Use three-dot to compare the merge-base so it works for PRs and pushes
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD || true)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Compute changed top-level directories
        id: dirs
        run: |
          echo "Computing directories from changed files..."
          echo "${{ steps.changes.outputs.changed_files }}" | tr '\n' '\n' | awk -F/ '{print $1}' | grep -v '^$' | sort -u > changed_dirs.txt || true
          echo "dirs<<EOF" >> $GITHUB_OUTPUT
          cat changed_dirs.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Show changed dirs
        run: |
          echo "Changed top-level directories:" 
          cat changed_dirs.txt || true

      - name: Trigger Render deploys for changed services
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          if [ -z "${RENDER_API_KEY}" ]; then
            echo "Missing secret RENDER_API_KEY. Set it in repository secrets." >&2
            exit 1
          fi

          if [ ! -s changed_dirs.txt ]; then
            echo "No top-level directory changes detected. Nothing to deploy."
            exit 0
          fi

          # Read the mapping file (JSON: { "api": "srv-xxxx", "web": "srv-yyyy" })
          MAPPING_FILE=render-services.json

          for dir in $(cat changed_dirs.txt); do
            SERVICE_ID=$(jq -r --arg key "$dir" '.[$key] // empty' "$MAPPING_FILE") || true
            if [ -z "$SERVICE_ID" ]; then
              echo "No Render service mapped for directory '$dir' (skipping)"
              continue
            fi

            echo "Triggering deploy for service ID: $SERVICE_ID (dir: $dir)"
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              -H "Content-Type: application/json" \
              -d '{}' \
              "https://api.render.com/v1/services/${SERVICE_ID}/deploys") || true

            if [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "200" ]; then
              echo "Deploy triggered for $dir -> $SERVICE_ID (status $HTTP_STATUS)"
            else
              echo "Failed to trigger deploy for $dir -> $SERVICE_ID (status $HTTP_STATUS)" >&2
              # do not fail the whole job; continue with other services
            fi
          done
